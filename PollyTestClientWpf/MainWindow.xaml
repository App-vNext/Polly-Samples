<Window x:Class="PollyTestClientWpf.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="PollyDemos" Background="#002C46" Width="1500" Height="1000">

    <Window.Resources>
        <Style TargetType="{x:Type Button}">
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Foreground" Value="#002C46" />
            <Setter Property="Margin" Value="12,0" />
        </Style>

        <Style TargetType="{x:Type Label}">
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Foreground" Value="White" />
        </Style>
    </Window.Resources>

    <Grid Margin="12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="18" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300" />
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0">
                <Image Source="Polly-Logo.png" Height="200" />
                <Label Content="Demos" FontSize="28" Foreground="#FFFFFF" />
            </StackPanel>
            

            <StackPanel Grid.Column="1" Orientation="Vertical">
                
                <UniformGrid Rows="1" Height="75" >
                    <Button Name="PlayButton" Content="Start" Click="PlayButton_Click"/>
                    <Button Name="StopButton" Content="Stop" Click="StopButton_Click"/>
                    <Button Name="ClearButton" Content="Clear" Click="ClearButton_Click"/>
                </UniformGrid>

                <Label Content="Choose demo:" />

                <ComboBox Name="Demo" 
                        FontSize="16" 
                        Foreground="#002C46" 
                        Background="#FFFFFF" 
                        FontWeight="Normal"
                        SelectionChanged="Demo_OnSelectionChanged">

                    <ComboBoxItem Name="Demo00_NoStrategy">
                        Sync Demo 00: No strategy
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo01_RetryNTimes">
                        Sync Demo 01: Retry N times
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo02_WaitAndRetryNTimes">
                        Sync Demo 02: Wait and retry N times
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo03_WaitAndRetryNTimes_WithEnoughRetries">
                        Sync Demo 03: Wait and retry N times, N big enough to guarantee success
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo04_WaitAndRetryForever">
                        Sync Demo 04: Wait and retry forever
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo05_WaitAndRetryWithExponentialBackoff">
                        Sync Demo 05: Wait and retry with exponential back-off
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo06_WaitAndRetryNestingCircuitBreaker">
                        Sync Demo 06: Wait and retry nesting circuit breaker
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo07_WaitAndRetryNestingCircuitBreakerUsingPipeline">
                        Sync Demo 07: Same as 06, using Pipeline
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo08_Pipeline_Fallback_WaitAndRetry_CircuitBreaker">
                        Sync Demo 08: Fallback, Retry, and CircuitBreaker in a Pipeline
                    </ComboBoxItem>
                    <ComboBoxItem Name="Demo09_Pipeline_Fallback_Timeout_WaitAndRetry">
                        Sync Demo 09: Fallback, Timeout, and Retry in a Pipeline
                    </ComboBoxItem>

                    <ComboBoxItem Name="AsyncDemo00_NoStrategy">
                        Async demo 00: No strategy
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo01_RetryNTimes">
                        Async demo 01: Retry N times
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo02_WaitAndRetryNTimes">
                        Async demo 02: Wait and retry N times
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo03_WaitAndRetryNTimes_WithEnoughRetries">
                        Async demo 03: Wait and retry N times, N big enough to guarantee success
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo04_WaitAndRetryForever">
                        Async demo 04: Wait and retry forever
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo05_WaitAndRetryWithExponentialBackoff">
                        Async demo 05: Wait and retry with exponential back-off
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo06_WaitAndRetryNestingCircuitBreaker">
                        Async demo 06: Wait and retry nesting circuit breaker
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo07_WaitAndRetryNestingCircuitBreakerUsingPipeline">
                        Async demo 07: Same as 06, using Pipeline
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo08_Pipeline_Fallback_WaitAndRetry_CircuitBreaker">
                        Async demo 08: Fallback, Retry, and CircuitBreaker in a Pipeline
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo09_Pipeline_Fallback_Timeout_WaitAndRetry">
                        Async demo 09: Fallback, Timeout, and Retry in a Pipeline
                    </ComboBoxItem>

                    <ComboBoxItem Name="AsyncDemo10_SharedConcurrencyLimiter">
                        Async demo 10: Without isolation: Faulting calls swamp resources, also prevent good calls
                    </ComboBoxItem>
                    <ComboBoxItem Name="AsyncDemo11_MultipleConcurrencyLimiters">
                        Async demo 11: With isolation: Faulting calls separated, do not swamp resources, good calls still succeed
                    </ComboBoxItem>

                </ComboBox>

                <Label Content="Description:" />

                <TextBox Name="Description"
                        TextWrapping="Wrap"
                        ScrollViewer.VerticalScrollBarVisibility="Auto" 
                        Height="100" 
                        FontSize="14" 
                        FontFamily="Consolas" />
            </StackPanel>
        </Grid>

        <Grid Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Label Grid.Row="0" Grid.Column="0"
                   Content="Output"/>

            <RichTextBox Grid.Row="1" Grid.Column="0" 
                         x:Name="Output"
                         Width="1061"
                         VerticalScrollBarVisibility="Auto" 
                         HorizontalScrollBarVisibility="Auto" 
                         Foreground="#002C46" 
                         Background="#FFFFFF"
                         FontSize="14"
                         FontFamily="Consolas">
                <RichTextBox.Resources>
                    <Style TargetType="{x:Type Paragraph}">
                        <Setter Property="Margin" Value="0" />
                    </Style>
                </RichTextBox.Resources>
            </RichTextBox>

            <Label Grid.Row="0" Grid.Column="2" 
                   Content="Statistic"/>

            <Grid Grid.Row="1" Grid.Column="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="0" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.Resources>
                    <Style TargetType="{x:Type Label}">
                        <Setter Property="FontSize" Value="18" />
                        <Setter Property="Foreground" Value="White" />
                        <Setter Property="HorizontalContentAlignment" Value="Right" />
                    </Style>
                    <Style TargetType="{x:Type TextBox}">
                        <Setter Property="HorizontalContentAlignment" Value="Right" />
                        <Setter Property="VerticalContentAlignment" Value="Center" />
                        <Setter Property="FontSize" Value="18" />
                        <Setter Property="FontFamily" Value="Consolas" />
                        <Setter Property="Foreground" Value="#002C46" />
                        <Setter Property="Background" Value="White" />
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
                    </Style>

                </Grid.Resources>
                <Label Grid.Row="0" Grid.Column="0" x:Name="StatisticLabel00"/>
                <TextBox Grid.Row="0" Grid.Column="2" x:Name="Statistic00" IsReadOnly="True"/>

                <Label Grid.Row="1" Grid.Column="0" x:Name="StatisticLabel01"/>
                <TextBox Grid.Row="1" Grid.Column="2" x:Name="Statistic01" IsReadOnly="True"/>

                <Label Grid.Row="2" Grid.Column="0" x:Name="StatisticLabel02"/>
                <TextBox Grid.Row="2" Grid.Column="2" x:Name="Statistic02" IsReadOnly="True"/>

                <Label Grid.Row="3" Grid.Column="0" x:Name="StatisticLabel03"/>
                <TextBox Grid.Row="3" Grid.Column="2" x:Name="Statistic03" IsReadOnly="True"/>

                <Label Grid.Row="4" Grid.Column="0" x:Name="StatisticLabel04"/>
                <TextBox Grid.Row="4" Grid.Column="2" x:Name="Statistic04" IsReadOnly="True"/>

                <Label Grid.Row="5" Grid.Column="0" x:Name="StatisticLabel05"/>
                <TextBox Grid.Row="5" Grid.Column="2" x:Name="Statistic05" IsReadOnly="True"/>

                <Label Grid.Row="6" Grid.Column="0" x:Name="StatisticLabel06"/>
                <TextBox Grid.Row="6" Grid.Column="2" x:Name="Statistic06" IsReadOnly="True"/>

                <Label Grid.Row="7" Grid.Column="0" x:Name="StatisticLabel07"/>
                <TextBox Grid.Row="7" Grid.Column="2" x:Name="Statistic07" IsReadOnly="True"/>

                <Label Grid.Row="8" Grid.Column="0" x:Name="StatisticLabel08"/>
                <TextBox Grid.Row="8" Grid.Column="2" x:Name="Statistic08" IsReadOnly="True"/>
            </Grid>
        </Grid>
    </Grid>
</Window>
